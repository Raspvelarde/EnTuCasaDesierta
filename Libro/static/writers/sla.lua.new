-- Custom Pandoc Writer for Scribus 1.5
-- (c) 2022 Perro Tuerto <hi@perrotuerto.blog>
-- Funded by Adjetiva Editorial <https://adjetiva.mx>
-- This code is licensed under GPLv3

-- VARIABLES

-- Sets shothand
local p = pandoc

-- Sets default font size
local fontsize = 12

-- Sets id mark for attributes storage
local mark = 'para'

-- Stores footnotes
local notes = {}

-- Stores links
local links = {}

-- Stores styles
local styles = {}

-- Stores inlines
local inlines = {}

-- FUNCTIONS
-- e == element
-- b == block
-- i == inline
-- a == attributes
-- c == classes
-- n == Integer
-- s == String

-- AUXILIAR FUNCTIONS

-- Adds spaces for indetation
local function spaces(n)
  return string.rep(' ', n)
end

-- Scapes characters
-- In Scribus texts are XML values attributes
local function escape(s)
  return tostring(s)
    :gsub('&', '&amp;')
    :gsub('<', '&lt;')
    :gsub('>', '&gt;')
    :gsub('"', '&quot;')
end

-- Calls for an specific global function
-- It's used to flatten or convert elements
local function call(e, fn)
  return _G[fn] and _G[fn](e) or e
end

-- Returns main parent styles
local function main_styles()
  return {
    '<CHARSTYLE CNAME="Default Character Style" DefaultStyle="1" FONT="Open Sans Regular" FCOLOR="Black"/>',
    '<CHARSTYLE CNAME="Pandoc" FONT="Open Sans Regular" FONTSIZE="' .. fontsize .. '"/>',
    '<STYLE NAME="Default Paragraph Style" DefaultStyle="1"/>',
    '<STYLE NAME="Pandoc" LINESPMode="2" CPARENT="Pandoc" FCOLOR="Black" NACH="' .. fontsize .. '"/>'
  }
end

-- Inserts or merges inline
local function set_inline(i)
  local last = inlines[#inlines]
  if last and i.content and last.attr == i.attr then
    inlines[#inlines].content = 
      last.content:__concat(i.content)
  else
    table.insert(inlines, i)
  end
end

-- Gets attributes
local function get_classes(i, inherit_tag)
  if (i.classes and #i.classes > 0) then
    return table.concat(i.classes, ' ')
  else
    return inherit_tag and i.tag or ''
  end
end

-- Processes inner inlines
local function process_inline(i, classes)
  local text = p.utils.stringify(i)
  classes = classes .. ' ' .. get_classes(i)
  set_inline(p.Span(text, { class = classes }))
end

-- Squashes inlines
local function flatten_inline(i)
  if i.content then 
    i.content:map(function (e)
      process_inline(e, get_classes(i, true))
    end)
  else
    set_inline(i)
  end
end

-- Adds paragraph at the end with parent classes
-- This marks when a new paragraph style starts
local function add_para(classes)
  return p.Para(p.Span('', {id = mark, class = classes}))
end

-- Adds ITEXT node
local function itext(s, cpar, extra)
  local ch = ' CH="' .. escape(s) .. '"'
  cpar = cpar and cpar or ''
  if cpar ~= '' then
    cpar = ' CPARENT="' .. cpar .. '"'
  end
  return '<ITEXT' .. cpar .. ch .. '/>'
end

-- TODO
local function style(name, attr, charstyle)
  local s = charstyle and 'CHARSTYLE' or 'STYLE'
  local n = charstyle and ' CNAME="' .. name .. '"' or ' NAME="' .. name .. '"'
  local p = charstyle and ' CPARENT="Pandoc"' or ' PARENT="Pandoc"'
  local tag = '<' .. s .. n .. p .. attr .. '/>'
  table.insert(styles, tag)
end

-- Adds para node
local function para(parent)
  -- TODO
  style(parent, '')
  return '<para PARENT="' .. parent .. '"/>'
end

-- FILTERS FUNCTIONS
-- function name == filter_element

local function flatten_inlines(e)
  inlines = {}
  for _, i in pairs(e) do
    flatten_inline(i)
  end
  return p.Inlines(inlines)
end

local function flatten_block(e)
  return call(e, 'flatten_' .. e.tag)
end

local function convert_element(e)
  return call(e, 'convert_' .. e.tag)
end

local function remove_note(e)
  e = p.walk_block(e, {
    { Inlines = function (e) return flatten_inlines(e) end }
  })
  table.insert(notes, e.content[1].content)
  return p.Space()
end

-- FILTERS

-- Remove conflicting elements
local remove = {
  -- Notes are conflicting because they are inlines 
  -- elements that contains block elements and it
  -- gets messy during flattening
  Note = function (e) return remove_note(e) end,
}

-- Flattens tree
-- Problem: Scribus text nodes can't be nested
-- Solution: nested nodes must be flattened and include inherited attributes
-- Trick: nested inlines get transformed to spans with the inline parent tags as classes
-- and blocks are transformed to one or more paragraphs
local flatten = {
  Inlines = function (e) return flatten_inlines(e) end,
  Block = function (e) return flatten_block(e) end,
}

-- Makes conversions
local convert = {
  Inline = function (e) return convert_element(e) end,
  Block = function (e) return convert_element(e) end,
}

-- FLATTENING BLOCK FUNCTIONS

function flatten_BlockQuote(b)
  return { table.unpack(b.content), add_para(b.tag) }
end

local function is_test(e)
  return e == e
end

function flatten_BulletList(b)
  return p.Null()
end

function flatten_CodeBlock(b)
  return { p.Para(b.text), add_para(b.tag) }
end

function flatten_DefinitionList(b)
  return p.Null()
end

function flatten_Div(b)
  return p.Null()
end

function flatten_Header(b)
  return { p.Para(b.content), add_para(b.tag .. b.level) }
end

function flatten_HorizontalRule(b)
  return { p.Para(' '), add_para(b.tag)}
end

function flatten_LineBlock(b)
  return p.Null()
end

function flatten_OrderedList(b)
  return p.Null()
end

function flatten_Para(b)
  return { b, add_para(b.tag)}
end

function flatten_Plain(b)
  -- ?
  return { p.Para(b.content), add_para(b.tag) }
end

function flatten_RawBlock(b)
  if b.text:sub(1, 2) == '<!' then
    return p.Null()
  else
    return { p.Para(b.text), add_para(b.tag) }
  end
end

function flatten_Table(b)
  return p.Null()
end

-- CONVERSION FUNCTIONS

-- INLINE FUNCTIONS

-- BLOCK FUNCTIONS

function convert_Para(b)
  if b.content[1].identifier == mark then
    return para(b.content[1].classes[1])
  else
    return itext(p.utils.stringify(b))
  end
end

-- Writes document
function Writer (doc, opts)
  doc = doc:walk(remove)
  doc = doc:walk(flatten)
  doc = doc:walk(convert)
  -- TODO
  doc = doc:walk({
    Meta = function(e)
      local all_styles = table.concat(main_styles()) .. table.concat(styles)
      e['all_styles'] = p.MetaInlines(all_styles)
      return e
    end
  })
  for _, b in pairs(doc.blocks) do
    --if b.tag ~= 'Null' and b.tag ~= 'Para' then print(b.tag) end
  end
  return p.write(doc, 'plain', opts)
end

--[[
function Doc(body, meta, vars)
  body = body:walk(remove)
  body = body:walk(flatten)
  body = body:walk(convert)
  return body, vars
end

-- The following code will produce runtime warnings when you haven't defined
-- all of the functions you need for the custom writer, so it's useful
-- to include when you're working on a writer.
local meta = {}
meta.__index =
  function(_, key)
    --io.stderr:write(string.format("WARNING: Undefined function '%s'\n",key))
    return function() return '' end
  end
setmetatable(_G, meta)
--]]
